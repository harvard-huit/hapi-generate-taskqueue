#!/usr/bin/env python

import jinja2
import sys
import os


def templateRender(tmpl, data):
    template = jinja2.Template(tmpl)
    return template.render(data)


def saveOutput(render, filename):
    with open(filename, 'w') as f1:
        f1.write(render)


def generateTemplate(name, directory):
    os.makedirs(os.path.join(directory, name, name, "tasks"))
    saveOutput(templateRender(templ_initpy, {"init_item": "from .tasks import __init__"}), os.path.join(
        directory, name, name, "__init__.py"))
    saveOutput(templateRender(templ_initpy, {
               "init_item": "from .tasks import *"}), os.path.join(directory, name, name, "tasks", "__init__.py"))
    saveOutput(templateRender(tmpl_readme, {"queue_name": name}), os.path.join(
        directory, name, "README.md"))
    saveOutput(templateRender(tmpl_setup, {"queue_name": name}), os.path.join(
        directory, name, "setup.py"))
    saveOutput(templateRender(tmpl_gitignore, {}),
               os.path.join(directory, name, ".gitignore"))
    saveOutput(templateRender(tmpl_tasks, {}), os.path.join(
        directory, name, name, "tasks", "tasks.py"))


templ_initpy = "{{ init_item }}"
tmpl_readme = """{{ queue_name }} Queue
======================

Please add Queue description.

Requirements
------------

Any pre-requisites that needs to covered. Environmental Variable required by Queue.

Dependencies
------------

A list of other dependencies need to run queue tasks.


License
-------


Author Information
------------------
"""
tmpl_setup = """from setuptools import setup, find_packages

setup(name='{{ queue_name }}',
      version='0.0',
      packages= find_packages(),
      install_requires=[
          'celery==3.1.22',
          'pymongo==3.2.1',
      ],
)
"""
tmpl_tasks = """from celery.task import task


#Example task
@task()
def add(x, y):
    \"\"\" Example task that adds two numbers or strings
        args: x and y
        return addition or concatination of strings
    \"\"\"
    result = x + y
    return result
"""
tmpl_gitignore = """*.py[cod]
.idea
# C extensions
*.so

# Packages
*.egg
*.egg-info
dist
build
eggs
parts
bin
var
sdist
develop-eggs
.installed.cfg
lib
lib64

# Installer logs
pip-log.txt

# Unit test / coverage reports
.coverage
.tox
nosetests.xml

# Translations
*.mo

# Mr Developer
.mr.developer.cfg
.project
.pydevproject
"""


if __name__ == '__main__':
    try:
        directory = sys.argv[2]
    except:
        directory = os.getcwd()  # set default as current working directory
    if len(sys.argv) > 1:
        name = sys.argv[1]
    else:
        raise Exception("Template name is required as an argument")
    generateTemplate(name, directory)
