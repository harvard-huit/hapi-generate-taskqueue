#!/usr/bin/env python

import jinja2
import sys
import os
import os, shutil
import sysconfig

site_package_data=os.path.join(sysconfig.get_paths()["purelib"],"generateTaskQueues", "data")

def copy_and_metadata(from_path, to_path):
    if os.path.exists(to_path):
        raise Exception("Directory already exists")
    shutil.copytree(from_path, to_path)

def templateRender(tmpl, data):
    template = jinja2.Template(tmpl)
    return template.render(data)

def saveOutput(render, filename):
    with open(filename, 'w') as f1:
        f1.write(render)

def generateTemplate(name, directory):
    # set up the directory structure
    copy_and_metadata(site_package_data,os.path.join(directory, name) )
    # create task directory
    os.makedirs(os.path.join(directory, name, name, "tasks"))
    # templates
    saveOutput(templateRender(templ_initpy, {"init_item": "from .tasks import __init__"}), os.path.join(
        directory, name, name, "__init__.py"))
    saveOutput(templateRender(templ_initpy, {
               "init_item": "from .tasks import *"}), os.path.join(directory, name, name, "tasks", "__init__.py"))
    saveOutput(templateRender(tmpl_readme, {"queue_name": name}), os.path.join(
        directory, name, "README.md"))
    saveOutput(templateRender(tmpl_setup, {"queue_name": name}), os.path.join(
        directory, name, "setup.py"))
    saveOutput(templateRender(tmpl_gitignore, {}),
               os.path.join(directory, name, ".gitignore"))
    saveOutput(templateRender(tmpl_tasks, {}), os.path.join(
        directory, name, name, "tasks", "tasks.py"))
    # K8s Vars
    os.makedirs(os.path.join(directory, name, "k8s_vars"))
    saveOutput(templateRender(tmpl_k8s_vars, {"queue_name": name}), os.path.join(
        directory, name,"k8s_vars", "dev_k8s_vars.yml"))

templ_initpy = "{{ init_item }}"
tmpl_readme = """{{ queue_name }} Queue
======================

Please add Queue description.

Requirements
------------

Any pre-requisites that needs to covered. Environmental Variable required by Queue.

Dependencies
------------

A list of other dependencies need to run queue tasks.


License
-------


Author Information
------------------
"""
tmpl_setup = """from setuptools import setup, find_packages

setup(name='{{ queue_name }}',
      version='0.0',
      packages= find_packages(),
      install_requires=[],
)
"""
tmpl_tasks = """from celery import Celery
import celeryconfig

app = Celery()
app.config_from_object(celeryconfig)

#Example task
@app.task()
def add(x, y):
    \"\"\" Example task that adds two numbers or strings
        args: x and y
        return addition or concatination of strings
    \"\"\"
    result = x + y
    return result
"""
tmpl_gitignore = """*.py[cod]
.idea
# C extensions
*.so

# Packages
*.egg
*.egg-info
dist
build
eggs
parts
bin
var
sdist
develop-eggs
.installed.cfg
lib
lib64

# Installer logs
pip-log.txt

# Unit test / coverage reports
.coverage
.tox
nosetests.xml

# Translations
*.mo

# Mr Developer
.mr.developer.cfg
.project
.pydevproject
"""
tmpl_k8s_vars="""target_app_secrets_ref:
  - HAPI_CELERY_CONFIG: hapi-celery-config
    CLIENT_KEY_PEM: hapi-rabbitmq-client-key
    CLIENT_CERT_PEM: hapi-rabbitmq-client-cert
    TESTCA_CACERT_PEM: hapi-celery-testca-cert
    CLIENT_MONGO_PEM: hapi-mongodb-client-cert
    # APIGEE_X_NONPROD: apigee-service-account-apigee-x-nonprod-406719
    # APIGEE_X_PREPROD: apigee-service-account-apigee-x-preprod
    # APIGEE_X_PROD: apigee-service-account-apigee-x-prod-406719

target_app_env:
  - name: BROKER_USE_SSL
    value: "True"
  - name: LOG_LEVEL
    value: INFO
  - name: MONGO_DB
    value: cybercom
  - name: MONGO_HOST
    value: cybercom-mongo.sand-cybercom.svc.cluster.local
  - name: MONGO_LOG_COLLECTION
    value: task_log
  - name: MONGO_PORT
    value: "27017"
  - name: MONGO_TOMBSTONE_COLLECTION
    value: tombstone
  - name: RABBITMQ_HOST
    value: cybercom-rabbitmq.sand-cybercom.svc.cluster.local
  - name: RABBITMQ_PORT
    value: "5671"
  - name: RABBITMQ_SSL_CA_FILE
    value: /ssl/testca/cacert.pem
  - name: RABBITMQ_SSL_CERT_FILE
    value: /ssl/client/cert.pem
  - name: RABBITMQ_SSL_KEY_FILE
    value: /ssl/client/key.pem
  - name: SSL_PATH
    value: /ssl
  - name: MONGO_USERNAME
    value: muser
  - name: RABBITMQ_DEFAULT_USER
    value: ruser
  - name: RABBITMQ_DEFAULT_VHOST
    value: rhost
  - name: CELERY_IMPORTS
    value: {{ queue_name }}
  - name: CELERY_QUEUE
    value: {{ queue_name }}

target_volume_mount:
  - name: ssl-keys
    mount_path: /ssl
    type: secret
    data_items:
      - key: CLIENT_CERT_PEM
        path: client/cert.pem
      - key: CLIENT_KEY_PEM
        path: client/key.pem
      - key: TESTCA_CACERT_PEM
        path: testca/cacert.pem
      - key: CLIENT_MONGO_PEM
        path: client/mongodb.pem
  #- name: apigee-auth
  #  mount_path: /xkeys
  #  type: secret
  #  data_items:
  #    - key: APIGEE_X_NONPROD
  #      path: apigee-x-nonprod.json
  #    - key: APIGEE_X_PREPROD
  #      path: apigee-x-preprod.json
  #    - key: APIGEE_X_PROD
  #      path: apigee-x-prod.json

target_namespace: celery-workers
target_app_name: {{ queue_name }}
create_service: ''
"""

if __name__ == '__main__':
    try:
        directory = sys.argv[2]
    except:
        directory = os.getcwd()  # set default as current working directory
    if len(sys.argv) > 1:
        name = sys.argv[1]
    else:
        raise Exception("Template name is required as an argument")
    generateTemplate(name, directory)
